/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreatedResponse;
import io.swagger.model.CustomerOrderDto;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-09-14T10:11:39.090Z")

@Api(value = "order", description = "the order API")
@RequestMapping(value = "/NeptuneDreams/CustomerOrders/1.0.0")
public interface OrderApi {

    Logger log = LoggerFactory.getLogger(OrderApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add a menuItemOption to a customer order.", nickname = "addMenuItemOptionToCustomerOrder", notes = "Add a menu item option, taken from the Order's menu item, to the specified open order. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Addition successful", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/order/addMenuItemOption/{customer_order_id}/{menu_option_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CreatedResponse> addMenuItemOptionToCustomerOrder(@ApiParam(value = "The id of the customer order",required=true) @PathVariable("customer_order_id") Integer customerOrderId,@ApiParam(value = "The id of Menu Item Option to add",required=true) @PathVariable("menu_option_id") Integer menuOptionId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 0,  \"message\" : \"message\",  \"body\" : \"body\"}", CreatedResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Start a new order", nickname = "addOrder", notes = "Place an order of a MenuItem, with a list of MenuItemOptions. This creates a new ServerOrder, with a single CustomerOrder for a specific MenuItem, with no options yet. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Order Placed", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<CreatedResponse> addOrder(@ApiParam(value = "The contents of the order" ,required=true )  @Valid @RequestBody CustomerOrderDto order) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 0,  \"message\" : \"message\",  \"body\" : \"body\"}", CreatedResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Mark an order completed", nickname = "completeOrder", notes = "Mark a server order complete. A Complete server order is an order that has been delivered. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Completed", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order/complete/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<CreatedResponse> completeOrder(@ApiParam(value = "The id of the completed order",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 0,  \"message\" : \"message\",  \"body\" : \"body\"}", CreatedResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "delete an order", nickname = "deleteOrder", notes = "Delete an order. This is not the same as marking it complete. Canceled orders should be deleted. Delivered orders should be marked complete. ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Deleted"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/order/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrder(@ApiParam(value = "The id of the order to delete. Note that this does not mark it complete. Completed orders should not be deleted, but should be marked complete at /order/complete/.",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "search for an order by completed status and order date, over a date range", nickname = "searchByComplete", notes = "Retrieve a server order by its completed status, with a date range. Returns an array of items. If you leave the starting date blank, it will default to the current date. If you leave the ending field blank, it will default to the start date. Both dates are inclusive, so searching for the same day in both fields will search for that day. Leaving the Complete field blank will cause it to search for all orders, regardless of their complete status. Formats for starting and ending dates are yyyy-MM-ddX or yyyy-MM-ddTHH:mmX for a specific time. ", response = CustomerOrderDto.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results found", response = CustomerOrderDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad request", response = CreatedResponse.class),
        @ApiResponse(code = 404, message = "Not found", response = CreatedResponse.class) })
    @RequestMapping(value = "/order/search",
        produces = { "applicaton/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<CustomerOrderDto>> searchByComplete(@NotNull @ApiParam(value = "Start of the date range for the order date to search for, inclusive, or the current date if left blank. Format is yyyy-MM-dd or yyyy-MM-dd HH-mm for a specific time. Except the dash between HH and mm is supposed to be a colon, but I can't show it with the build software I'm using. ", required = true) @Valid @RequestParam(value = "startingDate", required = true) OffsetDateTime startingDate,@ApiParam(value = "If true, search for compete orders. If false, search for incomplete orders. If missing, returns both incomplete and complete in the date range. ") @Valid @RequestParam(value = "complete", required = false) Boolean complete,@ApiParam(value = "End of the date range for the order date to search for, inclusive. If left blank, the current date is used. Format is yyyy-MM-ddX or yyyy-MM-ddTHH:mmX for a specific time ") @Valid @RequestParam(value = "endingDate", required = false) OffsetDateTime endingDate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type ", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "search for an order by id", nickname = "searchForOrder", notes = "Retrieve an order by its ID. ", response = CustomerOrderDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results found", response = CustomerOrderDto.class),
        @ApiResponse(code = 400, message = "bad request"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/order/{id}",
        produces = { "applicaton/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CustomerOrderDto> searchForOrder(@ApiParam(value = "id of the order to search for",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("", CustomerOrderDto.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type ", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update an order", nickname = "updateOrder", notes = "Update an order for a MenuItem, with a list of MenuItemOptions. This is one way to add items to an order. This may also be done with the /order/addMenuItemOption/ API. ", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Order Updated", response = CreatedResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = CreatedResponse.class) })
    @RequestMapping(value = "/order",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CreatedResponse> updateOrder(@ApiParam(value = "The contents of the order" ,required=true )  @Valid @RequestBody CustomerOrderDto order) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"id\" : 0,  \"message\" : \"message\",  \"body\" : \"body\"}", CreatedResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrderApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
